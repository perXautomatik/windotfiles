{
    "combos": [
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-18T17:35:23.952",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "validateParam",
            "matchingMode": 0,
            "modificationDateTime": "2023-06-26T11:47:06.713",
            "name": "validate parameter",
            "snippet": "    [CmdletBinding()]\n    param (\n        [ValidateScript({$_ -eq 20})]\n[ValidateNotNullOrEmpty()]\n        $Bill #whatever the parameter is called\n    )\n",
            "uuid": "{9862bcce-10ea-4c8c-8428-2adc5668634a}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-18T17:37:40.870",
            "description": "implementation",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "WhatIF",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-18T19:05:48.016",
            "name": "What if Flagg",
            "snippet": "    [CmdletBinding(SupportsShouldProcess=$true,ConfirmImpact='High')]\n                if($PSCmdlet.ShouldProcess(....)\n",
            "uuid": "{5d95796f-bb99-4939-97d4-7aeea1e7ea32}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-18T17:41:32.243",
            "description": "",
            "enabled": true,
            "group": "{e8e5a24e-a4b0-4303-9699-a177c7503ccd}",
            "keyword": "GSubmodule",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-18T17:42:22.068",
            "name": "GetSubmodulePaths",
            "snippet": "git config -f .gitmodules --get-regexp '^submodule\\..*\\.path$'",
            "uuid": "{f4105c0e-c0c6-4b7e-82f2-74836b5050d8}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-18T17:42:31.252",
            "description": "",
            "enabled": true,
            "group": "{e8e5a24e-a4b0-4303-9699-a177c7503ccd}",
            "keyword": "GsubUrl",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-18T17:42:52.946",
            "name": "GetSubmoduleUrl",
            "snippet": "git config -f .gitmodules --get \"$url_key\"",
            "uuid": "{71b4da21-af84-464e-ba90-d42f2c756b8b}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-18T17:48:19.128",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "MultipleVariables",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-20T16:48:11.478",
            "name": "assign to multiple variables at once",
            "snippet": "$path_key, $path = $_.split(\" \")",
            "uuid": "{b7bbdfa3-a2bc-4bd2-a675-aeaaa5113577}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-18T17:52:39.581",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "CustomPsObject",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-18T17:53:01.943",
            "name": "Function to create customPsObject",
            "snippet": "function Create-Object ($Schema, $Table, $Comment)\n{\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Schema = $Schema\n                            Table = $Table\n                            Comment = $Comment\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object â€“TypeName PSObject `\n                       -Property $properties\n\n  # Return the newly created object\n  return $object\n}",
            "uuid": "{8e039636-75a7-4427-aa32-ff12988fdd99}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-18T19:13:13.380",
            "description": "",
            "enabled": true,
            "group": "{e8e5a24e-a4b0-4303-9699-a177c7503ccd}",
            "keyword": "Ps1Git",
            "matchingMode": 0,
            "modificationDateTime": "2023-10-13T07:08:55.574",
            "name": "Powershell Redirect error from git",
            "snippet": "[Environment]::SetEnvironmentVariable('GIT_REDIRECT_STDERR', '2>&1', 'Process')",
            "uuid": "{c16ca78a-357c-4385-9b43-b8e609283455}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-20T16:02:01.834",
            "description": "",
            "enabled": true,
            "group": "{e8e5a24e-a4b0-4303-9699-a177c7503ccd}",
            "keyword": "Git-Root",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-20T16:02:34.885",
            "name": "Git root",
            "snippet": "git rev-parse --show-toplevel",
            "uuid": "{644be5bb-ec8b-4cac-8108-9d68b1219273}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-20T16:47:44.277",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "LINQ",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-20T16:53:00.250",
            "name": "Linq Join",
            "snippet": "$LinqJoinedData = [System.Linq.Enumerable]::Join(\n    $DatasetA,\n    $DatasetB,\n    [System.Func[Object,string]] {param ($x);$x.Name},\n    [System.Func[Object,string]]{param ($y);$y.Name},\n    [System.Func[Object,Object,Object]]{\n        param ($x,$y);\n        New-Object -TypeName PSObject -Property @{\n        Name = $x.Name;\n        PowerStatus = $x.PowerStatus;\n        ProductionStatus = $y.ProductionStatus}\n    }\n)\n$OutputArray = [System.Linq.Enumerable]::ToArray($LinqJoinedData)\n$LinqJoinedData.Where({($_.PowerStatus -eq \"Offline\") -and ($_.ProductionStatus -eq \"In Production\")})",
            "uuid": "{2f0058ae-4a5e-473e-bbd1-0ab51aebd5e0}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-21T15:49:56.422",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "Properties",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-21T15:50:15.464",
            "name": "Get-Member",
            "snippet": "| Get-Member -MemberType Property",
            "uuid": "{d40667f1-b1a1-4a87-9e58-80160599828c}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-21T15:53:57.896",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "~prop",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-23T19:42:35.975",
            "name": "Select object properties",
            "snippet": "Select-Object -Property *",
            "uuid": "{533362ae-fbc9-4e8b-9410-008b530836ae}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-21T21:08:49.091",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "Dialoge",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-21T21:09:11.816",
            "name": "FolderBrowseDialoge",
            "snippet": "Function Get-Folder($initialDirectory) {\n    [void] [System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')\n    $FolderBrowserDialog = New-Object System.Windows.Forms.FolderBrowserDialog\n    $FolderBrowserDialog.RootFolder = 'MyComputer'\n    if ($initialDirectory) { $FolderBrowserDialog.SelectedPath = $initialDirectory }\n    [void] $FolderBrowserDialog.ShowDialog()\n\n    return $FolderBrowserDialog.SelectedPath\n}",
            "uuid": "{e49f1aa5-c07f-4e37-abe3-efa9a3afe674}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-23T14:23:21.723",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "Threading",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-23T14:26:55.324",
            "name": "Psw7 Threading jobs",
            "snippet": "\n# Example workload\n$dataset = @(\n    @{\n        Id   = 1\n        Wait = 3..10 | get-random | Foreach-Object {$_*100}\n    }\n    @{\n        Id   = 2\n        Wait = 3..10 | get-random | Foreach-Object {$_*100}\n    }\n    @{\n        Id   = 3\n        Wait = 3..10 | get-random | Foreach-Object {$_*100}\n    }\n    @{\n        Id   = 4\n        Wait = 3..10 | get-random | Foreach-Object {$_*100}\n    }\n    @{\n        Id   = 5\n        Wait = 3..10 | get-random | Foreach-Object {$_*100}\n    }\n)\n\n# Create a hashtable for process.\n# Keys should be ID's of the processes\n$origin = @{}\n$dataset | Foreach-Object {$origin.($_.id) = @{}}\n\n# Create synced hashtable\n$sync = [System.Collections.Hashtable]::Synchronized($origin)\n\n$job = $dataset | Foreach-Object -ThrottleLimit 3 -AsJob -Parallel {\n    $syncCopy = $using:sync\n    $process = $syncCopy.$($PSItem.Id)\n\n    $process.Id = $PSItem.Id\n    $process.Activity = \"Id $($PSItem.Id) starting\"\n    $process.Status = \"Processing\"\n\n    # Fake workload start up that takes x amount of time to complete\n    start-sleep -Milliseconds ($PSItem.wait*5)\n\n    # Process. update activity\n    $process.Activity = \"Id $($PSItem.id) processing\"\n    foreach ($percent in 1..100)\n    {\n        # Update process on status\n        $process.Status = \"Handling $percent/100\"\n        $process.PercentComplete = (($percent / 100) * 100)\n\n        # Fake workload that takes x amount of time to complete\n        Start-Sleep -Milliseconds $PSItem.Wait\n    }\n\n    # Mark process as completed\n    $process.Completed = $true\n}\n\nwhile($job.State -eq 'Running')\n{\n    $sync.Keys | Foreach-Object {\n        # If key is not defined, ignore\n        if(![string]::IsNullOrEmpty($sync.$_.keys))\n        {\n            # Create parameter hashtable to splat\n            $param = $sync.$_\n\n            # Execute Write-Progress\n            Write-Progress @param\n        }\n    }\n\n    # Wait to refresh to not overload gui\n    Start-Sleep -Seconds 0.1\n}",
            "uuid": "{132d5796-180f-49b9-97a6-82d7ff9f7596}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-23T14:29:27.205",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "PsVersion",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-23T14:29:49.198",
            "name": "Get running psversion",
            "snippet": "$PSVersionTable.PSVersion.ToString()",
            "uuid": "{6de9f515-209b-4b25-9573-c394447847ea}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-23T15:28:44.533",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "Parameterblock",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-23T15:29:17.906",
            "name": "Powershell Parameter object Splatting",
            "snippet": "$commands = @{\n    path1 = \"C:\\temp\\test.txt\"\n    path2 = \"C:\\temp\\test2.txt\"\n}\n\nmytest @commands",
            "uuid": "{7cd6a03e-a7d0-4c90-a2c7-18b549b983c7}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-23T15:41:29.727",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "GetParams",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-23T15:42:05.462",
            "name": "Get list of parameters",
            "snippet": "get-help $MyMenu.Submenus.Add -parameter *\n\n(Get-Command get-help $MyMenu.Submenus.Add).Parameters",
            "uuid": "{3d8a78ef-abee-4056-a09d-e48a550b8116}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-05-23T17:01:20.216",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "PsHashSet",
            "matchingMode": 0,
            "modificationDateTime": "2023-05-23T17:01:42.498",
            "name": "Ps Hashet hardcoded",
            "snippet": "$dataset = @(\n    @{\n        Id   = 1\n        Wait = 3..10 | get-random | Foreach-Object {$_*10}\n    }\n    @{\n        Id   = 2\n        Wait = 3..10 | get-random | Foreach-Object {$_*100}\n    }\n    @{\n        Id   = 3\n        Wait = 3..10 | get-random | Foreach-Object {$_*10}\n    }\n    @{\n        Id   = 4\n        Wait = 3..10 | get-random | Foreach-Object {$_*1000}\n    }\n    @{\n        Id   = 5\n        Wait = 3..10 | get-random | Foreach-Object {$_*10}\n    }\n)",
            "uuid": "{9b0ea6b3-fa9f-4a1f-a1bd-5b6fd67ac614}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-06-13T09:19:28.972",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "pipelineParameter",
            "matchingMode": 0,
            "modificationDateTime": "2023-06-13T09:20:16.248",
            "name": "mandatory and non mandatory accept from pipeline",
            "snippet": "function Get-SomeWork {\n  [CmdletBinding ()]\n  param (\n    [Parameter (Mandatory=$True, ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True)]\n    [Alias ('host')]\n    [string []]$computername\n  )\n\n  PROCESS {\n    foreach ($computer in $computername) {\n      # do some work with $computer\n    }\n  }\n}",
            "uuid": "{cc1e87cf-a39c-4ba0-a6dd-ea5d1a36234e}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-06-13T09:27:59.668",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "enumparameter",
            "matchingMode": 0,
            "modificationDateTime": "2023-06-13T09:28:22.404",
            "name": "enum parameter in function",
            "snippet": "# Declare the enum type\nenum LevelEnum {\n  NC = 1;\n  NML = 2;\n  CS = 3\n}\n\n# Use the enum name as the parameter type\n[CmdletBinding ()]\nparam (\n  [Parameter (Mandatory=$True)]\n  [LevelEnum]$Level\n)",
            "uuid": "{a3a58ec6-3b12-473d-9e1f-df1067712548}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-06-13T10:50:52.236",
            "description": "",
            "enabled": true,
            "group": "{58d6d15f-9fcc-422a-8b90-970bd4ffadb6}",
            "keyword": "PyCheckNetwork",
            "matchingMode": 0,
            "modificationDateTime": "2023-06-13T10:51:23.250",
            "name": "check nearby networks",
            "snippet": "import network\n>>> wlan = network.WLAN(network.STA_IF)\n>>> wlan.active(True) \n>>> wlan.config(pm = 0xa11140)\n>>> wlan.scan()",
            "uuid": "{a5e847bd-db40-4b02-803b-de20773626e3}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-06-26T06:33:53.759",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "iostring",
            "matchingMode": 0,
            "modificationDateTime": "2023-06-26T06:34:10.263",
            "name": "string to io",
            "snippet": "[System.IO.Path]::GetFileName($pattern)",
            "uuid": "{41453142-9636-4cf1-82a0-1842d4893cbc}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-06-26T06:56:36.682",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "imperroraction",
            "matchingMode": 0,
            "modificationDateTime": "2023-06-26T06:57:01.501",
            "name": "allows erroraction enum",
            "snippet": "function Foo1() {\n [CmdletBinding()]\n PARAM()\n process{\n   Write-Host \"in Foo1\"\n   Foo2\n }\n}",
            "uuid": "{e17f6c75-a5e7-4d46-94bd-8db241b194a4}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-06-26T07:24:30.335",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "mandatory",
            "matchingMode": 0,
            "modificationDateTime": "2023-06-26T07:24:55.801",
            "name": "nonmandatory paramters",
            "snippet": "[CmdletBinding ()]\n    Param\n    (\n        [Parameter ()] #optional by default\n        [String]$Param1,\n\n        [Parameter (Mandatory=$true)] #mandatory\n        [String]$Param2\n    )\n",
            "uuid": "{f34af6fd-60fa-459e-bc10-9e790ad17623}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-06-26T07:28:34.481",
            "description": " to get the commit hash of the first commit in the repository2, but this may not be",
            "enabled": true,
            "group": "{e8e5a24e-a4b0-4303-9699-a177c7503ccd}",
            "keyword": "firstcommitsha",
            "matchingMode": 0,
            "modificationDateTime": "2023-06-26T07:29:07.090",
            "name": "first commit sha",
            "snippet": "git rev-list --max-parents=0 HEAD",
            "uuid": "{09d07a47-f642-4a11-acb9-c32293dac33e}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-06-26T19:14:55.691",
            "description": "",
            "enabled": true,
            "group": "{6b2a733e-8c8b-4974-83ea-b133926dc39b}",
            "keyword": "rewrite",
            "matchingMode": 0,
            "modificationDateTime": "2023-07-04T07:36:44.138",
            "name": "rewrite",
            "snippet": "rewrite this script into functions with synopsis, with parameter validation and error checking ; #{clipboard}",
            "uuid": "{544fad2f-000b-4739-8116-34f0cc7d548b}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-06-26T19:56:47.284",
            "description": "",
            "enabled": true,
            "group": "{6b2a733e-8c8b-4974-83ea-b133926dc39b}",
            "keyword": "psudopowershell",
            "matchingMode": 0,
            "modificationDateTime": "2023-07-04T09:09:08.736",
            "name": "rewrite pseudo",
            "snippet": "rewrite this pseudocode into powershell functions with synopsis, with parameter validations and error checking ; #{clipboard}",
            "uuid": "{6474ec34-92d9-4df4-9308-53a8981de919}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-07-03T16:04:19.065",
            "description": "",
            "enabled": true,
            "group": "{6b2a733e-8c8b-4974-83ea-b133926dc39b}",
            "keyword": "breakup",
            "matchingMode": 0,
            "modificationDateTime": "2023-07-04T07:35:33.443",
            "name": "breakup into functions",
            "snippet": "can you breakup this code into many smaller functions, including parameter validation and synopsises ; #{clipboard} ",
            "uuid": "{cfb59537-9e6e-4de4-acab-6833a4e9a775}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-07-03T21:38:05.005",
            "description": "",
            "enabled": true,
            "group": "{8f710183-5365-4a31-94c9-ddac991c1fa3}",
            "keyword": "DefaultDisplayProperty",
            "matchingMode": 0,
            "modificationDateTime": "2023-07-03T21:38:40.801",
            "name": "Default Property Display",
            "snippet": "#legacy\n\n$defaultDisplaySet = 'Name','Language'\n$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet',[string[]]$defaultDisplaySet)\n$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)\n$MyObject | Add-Member MemberSet PSStandardMembers $PSStandardMembers\n\n#slicker\n\n$q = [PSCustomObject]@{\n        PSTypeName = 'match.range' #give the object a type name\n        match=\"a\" ; value=\"b\" ; linenumber = 1 }\n\n    $TypeData = @{\n    TypeName = 'match.range' #refere to object by it's type name\n    DefaultDisplayPropertySet = 'match','value'}\n\n    $q",
            "uuid": "{03321661-5836-4ba7-b613-1feb1f179ea7}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-07-04T07:42:56.683",
            "description": "",
            "enabled": true,
            "group": "{5d59a657-4579-4a69-bcc2-62a67966bbcc}",
            "keyword": "abcd",
            "matchingMode": 0,
            "modificationDateTime": "2023-07-04T07:44:22.206",
            "name": "hello",
            "snippet": "Hello #{powershell:C:\\Temp\\script.ps1}!",
            "uuid": "{64aa4512-8581-495e-b7bc-3ec849206752}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-07-04T07:45:15.386",
            "description": "",
            "enabled": true,
            "group": "{d89711fa-58cc-40ab-9545-97ee2379ea93}",
            "keyword": "encfunc",
            "matchingMode": 0,
            "modificationDateTime": "2023-07-04T07:46:06.692",
            "name": "function",
            "snippet": "function ()\n{\nparam()\n#{clipboard}\n}",
            "uuid": "{5a74569d-2a35-49ea-8553-3f584ee0b409}"
        },
        {
            "caseSensitivity": 0,
            "creationDateTime": "2023-09-12T08:29:16.496",
            "description": "",
            "enabled": true,
            "group": "{6b2a733e-8c8b-4974-83ea-b133926dc39b}",
            "keyword": "voidt",
            "matchingMode": 0,
            "modificationDateTime": "2023-09-12T08:29:31.781",
            "name": "everything",
            "snippet": "voidtools everything",
            "uuid": "{79fd9ce8-9959-457e-add8-c099942a9dfc}"
        }
    ],
    "fileFormatVersion": 10,
    "groups": [
        {
            "creationDateTime": "2023-05-18T17:34:37.467",
            "description": "The default group.",
            "enabled": true,
            "modificationDateTime": "2023-05-18T17:34:37.467",
            "name": "Default Group",
            "uuid": "{937b65fb-2a61-409a-bdb4-8669952c1935}"
        },
        {
            "creationDateTime": "2023-05-18T17:35:54.669",
            "description": "",
            "enabled": true,
            "modificationDateTime": "2023-05-18T17:35:58.515",
            "name": "ps1",
            "uuid": "{8f710183-5365-4a31-94c9-ddac991c1fa3}"
        },
        {
            "creationDateTime": "2023-05-18T17:41:37.710",
            "description": "",
            "enabled": true,
            "modificationDateTime": "2023-05-18T17:41:41.270",
            "name": "Git",
            "uuid": "{e8e5a24e-a4b0-4303-9699-a177c7503ccd}"
        },
        {
            "creationDateTime": "2023-06-13T10:50:44.948",
            "description": "",
            "enabled": true,
            "modificationDateTime": "2023-06-13T10:50:49.877",
            "name": "MicroPython",
            "uuid": "{58d6d15f-9fcc-422a-8b90-970bd4ffadb6}"
        },
        {
            "creationDateTime": "2023-06-26T19:14:48.094",
            "description": "",
            "enabled": true,
            "modificationDateTime": "2023-06-26T19:14:53.084",
            "name": "Gpt",
            "uuid": "{6b2a733e-8c8b-4974-83ea-b133926dc39b}"
        },
        {
            "creationDateTime": "2023-07-04T07:42:42.929",
            "description": "",
            "enabled": true,
            "modificationDateTime": "2023-07-04T07:42:53.739",
            "name": "InsertPowershellScript",
            "uuid": "{5d59a657-4579-4a69-bcc2-62a67966bbcc}"
        },
        {
            "creationDateTime": "2023-07-04T07:45:08.411",
            "description": "",
            "enabled": true,
            "modificationDateTime": "2023-07-04T07:45:12.499",
            "name": "Encircling",
            "uuid": "{d89711fa-58cc-40ab-9545-97ee2379ea93}"
        }
    ]
}
